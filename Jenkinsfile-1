pipeline {
    agent any

    tools {
        // Define the Dependency-Check tool here with the correct tool name from Jenkins Global Tool Configuration
        dependency-check 'DP-check' // Ensure this matches the name you gave the tool in Jenkins Global Tool Configuration
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'OussamaKoussaier', url: 'https://github.com/oussamakoussaier/Project-DevOps.git'
            }
        }

        stage('Unit Testing') {
            steps {
                sh "mvn test"
            }
        }

        stage('Integration Testing') {
            steps {
                sh "mvn verify -DskipUnitTests"
            }
        }

        stage('Maven Build') {
            steps {
                sh "mvn clean install"
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    // Ensure the correct SonarQube credentials ID is used here
                    withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }

        stage('Dependency Vulnerability Scanning') {
            steps {
                script {
                    // Run OWASP Dependency-Check to check for vulnerabilities in dependencies
                    dependencyCheck additionalArguments: '--scan . --out target/dependency-check-report', 
                                    odcInstallation: 'DP-check' // 'DP-check' is the name of the tool you configured in Global Tool Configuration
                }
            }
        }
    }
}
