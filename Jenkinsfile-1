pipeline {
    agent any
         environment {
        NVD_API_KEY = '0bfb1a0f-8c1c-4c46-8dbf-fed7c645828d'  
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
            }
        stages {
            stage('Git Checkout and Secrets Scan') {
                steps {
                    sh 'docker pull gesellix/trufflehog'
                    sh 'docker run -t gesellix/trufflehog --json https://github.com/devopssecure/webapp.git > trufflehog'
                  }
        }
            stage('Dependency Check') {
                steps {
                // Run Dependency Check with the provided API key and output format
                dependencyCheck additionalArguments: '--format HTML --nvdApiKey $NVD_API_KEY', odcInstallation: 'DP-check'
            }
        }
            stage('Integration Testing and DAST with OWASP ZAP') {
                steps {
                    script {
                                              // Start OWASP ZAP Docker container for dynamic scanning
                        sh 'docker run -d -p 8084:8080 --name zaproxy --network mynetwork zaproxy/zap-stable zap.sh -daemon -port 8080'
            
                        // Wait for ZAP to start
                        sleep 10
            
                        // Trigger the active scan via ZAP API (replace with your actual URL)
                        sh """
                        curl -X POST http://102.168.33.10:8084/JSON/ascan/action/scan \
                            -d 'url=https://https://github.com/oussamakoussaier/Project-DevOps.git' \
                            -d 'recurse=true' \
                            -d 'inScopeOnly=false' \
                            -d 'scanContext=default'
                        """
            
                        // Run the Maven verify command
                        sh 'mvn verify -DskipUnitTests'

                        // Optionally stop the OWASP ZAP container after the scan
                        sh 'docker stop zaproxy'

                    }
                }
            }
            stage('Static Code Analysis') {
                steps {
                    script {
                        withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                        sh 'mvn clean package sonar:sonar'
            }
        }
    }
}
    }
}
